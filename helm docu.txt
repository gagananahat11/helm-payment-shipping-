# Helm: The APT for KubernetesThink of Helm as the "APT" or "YUM" for Kubernetes. Just like APT helps you manage software packages on a Linux system, Helm helps you manage applications on a Kubernetes cluster.### How Helm Works:In Linux, you use APT to install software like nginx by running:```sudo apt install nginx```This pulls the nginx package from a repository, installs it, and sets it up on your system.In Kubernetes, you use Helm to install applications like nginx by running:```helm install my-nginx bitnami/nginx```This pulls an nginx Helm chart from a chart repository, creates the necessary Kubernetes resources (like deployments, services), and sets up the application in your cluster.### Why Use Helm?1. Package ManagementAPT manages DEB packages (like .deb files) on Linux.Helm manages Helm Charts (YAML files bundled together) in Kubernetes.2. Version ControlAPT can install specific versions of a package using:```sudo apt install nginx=1.18.0```Helm can do the same:```helm install my-nginx bitnami/nginx --version 13.0.0```This means you can easily roll back or upgrade applications.3. Configuration ManagementWith APT, you can configure software via config files (like /etc/nginx/nginx.conf).With Helm, you can override configuration values using a YAML file:```helm install my-nginx bitnami/nginx --values custom-values.yaml```This allows you to customize how the application is deployed.4. Managing DependenciesAPT automatically resolves dependencies between packages.Helm handles dependencies between Kubernetes components, like ensuring a database is ready before deploying a web app.### Why Helm Matters in KubernetesKubernetes is a complex system with many moving parts (pods, deployments, services, etc.). Helm simplifies the process by packaging everything into reusable charts. It’s like having a one-click install for your entire application stack instead of manually creating each component.
Collapse file: 02-components-of-helm.md‎02-components-of-helm.md‎Copy file name to clipboard+103Lines changed: 103 additions & 0 deletionsDisplay the source diffDisplay the rich diffOriginal file line numberDiff line numberDiff line change@@ -0,0 +1,103 @@# Understanding Helm Components## 1. Helm ChartsA **Helm chart** is a collection of files that describe a set of Kubernetes resources. It acts as a **package** for your Kubernetes application, similar to a **DEB** or **RPM** file in Linux.### **Components of a Chart:*** **Chart.yaml:** Metadata about the chart (name, version, etc.).* **values.yaml:** Default configuration values.* **templates/**: Directory containing Kubernetes manifests as templates.* **charts/**: Directory for chart dependencies.* **README.md:** Optional documentation.### **Creating a Chart:**```bashhelm create myapp```This generates a new chart structure under the `myapp` directory.### **Installing a Chart:**```bashhelm install my-nginx bitnami/nginx```Charts enable you to define complex applications, including deployments, services, config maps, and more, all bundled together for easy management.---## 2. Helm RepositoriesA **Helm repository** is a place where Helm charts are stored and shared. It’s similar to a **package repository** in Linux (like APT or YUM repos).### **Adding a Repository:**```bashhelm repo add bitnami https://charts.bitnami.com/bitnami```### **Listing Repositories:**```bashhelm repo list```### **Updating Repositories:**```bashhelm repo update```Repositories make it easy to organize, store, and distribute Helm charts, and they support versioning, so you can choose specific versions of a chart to install.---## 3. Helm ReleasesA **Helm release** is a specific instance of a chart that has been deployed to your Kubernetes cluster. You can think of it as a **deployed version of your application.**### **Creating a Release:**```bashhelm install myapp ./myapp```### **Listing Releases:**```bashhelm list```### **Upgrading a Release:**```bashhelm upgrade myapp ./myapp```### **Rolling Back a Release:**```bashhelm rollback myapp 1```### **Deleting a Release:**```bashhelm uninstall myapp```Releases are useful for tracking deployed versions, performing rollbacks in case of failures, and managing multiple instances of the same chart.---## Summary* **Charts** are packages that define Kubernetes resources.* **Repositories** are storage locations for Helm charts.* **Releases** are deployed instances of a chart.
Collapse file: 03-deploy-helm-chart.md‎03-deploy-helm-chart.md‎Copy file name to clipboard+90Lines changed: 90 additions & 0 deletionsDisplay the source diffDisplay the rich diffOriginal file line numberDiff line numberDiff line change@@ -0,0 +1,90 @@# Managing NGINX with Helm## Prerequisites* Helm installed on your system.* A running Kubernetes cluster.* kubectl configured to interact with the cluster.---### 1. Installing NGINX using HelmTo deploy NGINX, we will use the Bitnami Helm chart.1. **Add the Bitnami repository:**   ```bash   helm repo add bitnami https://charts.bitnami.com/bitnami   helm repo update   ```2. **Install the NGINX Helm chart:**   ```bash   helm install my-nginx bitnami/nginx   ```3. **Verify the installation:**   ```bash   helm list   kubectl get pods   ```---### Customize during Installation* To see available values for customization, run:  ```bash  helm show values bitnami/nginx  ```* To preview the manifest without deploying:  ```bash  helm template my-nginx bitnami/nginx  ```---### 2. Upgrading NGINX using HelmTo upgrade the NGINX release, we can change parameters or update the chart version.1. **Upgrade the release:**   ```bash   helm upgrade my-nginx bitnami/nginx --set service.type=NodePort   ```2. **Check the upgrade status:**   ```bash   helm status my-nginx   ```---### 3. Uninstalling NGINX using HelmTo remove the NGINX release from the cluster:1. **Uninstall the release:**   ```bash   helm uninstall my-nginx   ```2. **Verify the uninstallation:**   ```bash   helm list   kubectl get pods   ```---
Collapse file: 04-create-helm-chart.md‎04-create-helm-chart.md‎Copy file name to clipboard+183Lines changed: 183 additions & 0 deletionsDisplay the source diffDisplay the rich diffOriginal file line numberDiff line numberDiff line change@@ -0,0 +1,183 @@# Creating Helm Repositories for Payments and Shipping Services## ScenarioAs a DevOps engineer at an e-commerce company, you manage two services: Payments and Shipping. To streamline deployment and management, we will create a Helm repository containing Helm charts for both services. We will use a dummy BusyBox image for both services to simulate their functionality.---### Prerequisites* Helm installed on your system.* A running Kubernetes cluster.* GitHub account for hosting the Helm repo.* kubectl configured to interact with the cluster.---## Step 1: Create the Helm Charts1. **Create the directory structure:**   ```bash   mkdir -p helm-repo/{payments,shipping}   cd helm-repo   ```2. **Generate Helm charts for both services:**   ```bash   helm create payments   helm create shipping   ```